version: "3.4"
services:
  read-cache-master:
    hostname: read-cache-master
    image: 10.128.1.28:5000/redis:latest
    build: redis
    ports:
      - "6379:6379"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - "node.role == manager"
    volumes:
      - "/home/student/redis-data:/data"
    networks:
      - read-cache-net
      - webnet
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      start_period: 20s
      interval: 30s
      timeout: 10s
      retries: 3

  read-cache-slave:
    hostname: read-cache-slave
    image: 10.128.1.28:5000/redis:latest
    build: redis
    ports:
      - "6380:6379"
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - "node.role != manager"
    networks:
      - read-cache-net
      - webnet
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      start_period: 20s
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --slaveof read-cache-master 6379
    depends_on:
      - read-cache-master

  write-queue:
    hostname: write-queue
    image: 10.128.1.28:5000/redis:latest
    build: redis
    ports:
      - "6390:6379"
    deploy:
      replicas: 4
      restart_policy:
        condition: on-failure
    networks:
      - write-queue-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      start_period: 20s
      interval: 30s
      timeout: 10s
      retries: 3

  write-queue-flush:
    hostname: write-queue-flush
    image: 10.128.1.28:5000/write-queue-flush:latest
    depends_on:
      - write-queue
    build:
      context: javasrc
      dockerfile: write-queue-flush/Dockerfile
    deploy:
      replicas: 4
      restart_policy:
        condition: on-failure
    ports:
      - "8100:8000"
    networks:
      - write-queue-net

  url-shortner:
    image: 10.128.1.28:5000/shortner:latest
    build:
      context: javasrc
      dockerfile: shortner/Dockerfile
    deploy:
      replicas: 4
      restart_policy:
        condition: on-failure
    ports:
      - "8000:8000"
    volumes:
      - "/home/student/server-logs:/app/out"
    networks:
      - read-cache-net
      - write-queue-net
      - webnet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      start_period: 20s
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - write-queue
      - read-cache-slave

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - webnet

networks:
  read-cache-net:
  write-queue-net:
  webnet:
